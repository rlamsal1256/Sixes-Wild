package builder.controllers;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import common.model.Board;

import builder.actions.CopyStateAction;
import builder.view.BuilderView;

/** Controller for changing size of boards in builderView
 * 
 * @author Jmmckinney
 */
public class BoardSizeChangeController extends MouseAdapter implements ChangeListener{
	BuilderView builderView;
	boolean sizeChanged;
	int startSize;
	CopyStateAction<Board> action;
	
	public BoardSizeChangeController(BuilderView builderView)
	{
		this.builderView = builderView;
		this.sizeChanged = false;
	}
	
	@Override
	public void mousePressed(MouseEvent e) {
		if(BuilderViewReference.get().getModel().getCurrentLevel() != null)
		{
			action = new CopyStateAction<Board>(BuilderViewReference.get().getModel().getCurrentLevel().getParams().getBoard());
			this.startSize = BuilderViewReference.get().getModel().getCurrentLevel().getParams().getBoard().getSize();
		}
	}
	
	@Override
	public void mouseReleased(MouseEvent e) {
		if(BuilderViewReference.get().getModel().getCurrentLevel() != null)
		{
			Board fin = action.getFinal();
			fin.copy(BuilderViewReference.get().getModel().getCurrentLevel().getParams().getBoard());
			action.setFinal(fin);
			if(sizeChanged)
				BuilderViewReference.get().getModel().doAction(action);
			
			//System.out.println("ActionEvent");
			sizeChanged = false;
		}
	}
	
	public void stateChanged(ChangeEvent arg0) {
		if(BuilderViewReference.get().getModel().getCurrentLevel()==null)
			return;
		if(BuilderViewReference.get().listen==false)
			return;
		if(startSize != builderView.getSizeSliderValue())
			sizeChanged = true;
		
		BuilderViewReference.get().getModel().getCurrentLevel().getParams().getBoard().setSize(builderView.getSizeSliderValue());
		BuilderViewReference.updateFields();
	}
}
